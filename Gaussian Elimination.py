import numpy as npA = []B = []def GaussianElimination(A,B,d):    dimension = len(A);    #Forward Elimination        for row in range(0,dimension-1,1):        for eliminatingRow in range(row+1,dimension,1):             factor = A[eliminatingRow][row] / A[row][row]            for i in range(row,dimension,1):                A[eliminatingRow][i] = A[eliminatingRow][i] - (factor*A[row][i])            B[eliminatingRow] = B[eliminatingRow] - (factor * B[row])            if(d == True):                print('Intermediate Matrix:')                print('A: ',A)                print('B: ',B)                print()            #Back Substitution        solution = []        for variableCount in range(0,dimension,1):        subtrahand = 0.0        for j in range(0,variableCount,1):            subtrahand = subtrahand + (A[dimension-1-variableCount][dimension-1-j] * solution[j])        solution.append((B[dimension-1-variableCount] - subtrahand) / A[dimension-1-variableCount][dimension-1-variableCount])        solution.reverse()    return solutiondef takeInputMatrices():     equationCount = int (input())    for i in range(0,equationCount,1) :        for j in range(0,equationCount,1) :            A.append(float(input()))        for k in range(0,equationCount,1) :        B.append(float(input()))        coeff = np.reshape(A,(equationCount,equationCount))    constants = np.array(B)         ans = GaussianElimination(coeff, constants, True)    print('Solution: ')    for k in range(0,equationCount,1):         print(round(ans[k],4))        takeInputMatrices()